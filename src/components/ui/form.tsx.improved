x
"use client";

import React, { createContext, useContext, useId, forwardRef, ReactElement, HTMLAttributes, ComponentPropsWithoutRef, ElementRef } from "react";
import { Controller, FormProvider, useFormContext, ControllerProps, FieldPath, FieldValues } from "react-hook-form";
import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";

const Form = FormProvider;

interface FormFieldContextValue<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>> {
  name: TName;
}

const FormFieldContext = createContext<FormFieldContextValue | undefined>(undefined);

/**
 * Provides context for a form field.
 * @param props ControllerProps
 * @returns ReactElement
 */
const FormField = <TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>>(
  props: ControllerProps<TFieldValues, TName>
): ReactElement => (
  <FormFieldContext.Provider value={{ name: props.name }}>
    <Controller {...props} />
  </FormFieldContext.Provider>
);

/**
 * Custom hook to access form field context.
 * @throws Error if used outside <FormField>.
 * @returns Context value with additional form item IDs.
 */
const useFormField = () => {
  const fieldContext = useContext(FormFieldContext);
  if (!fieldContext) {
    throw new Error("useFormField must be used within a <FormField>.");
  }

  const { getFieldState, formState } = useFormContext();
  const fieldState = getFieldState(fieldContext.name, formState);
  const id = useId();

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

interface FormItemProps extends HTMLAttributes<HTMLDivElement> {}

/**
 * Component for form item layout.
 * @param props FormItemProps
 * @param ref Ref<HTMLDivElement>
 * @returns ReactElement
 */
const FormItem = forwardRef<HTMLDivElement, FormItemProps>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("space-y-2", className)} {...props} />
));
FormItem.displayName = "FormItem";

type FormLabelProps = ComponentPropsWithoutRef<typeof LabelPrimitive.Root>;

/**
 * Component for form label with error handling.
 * @param props FormLabelProps
 * @param ref Ref<ElementRef<typeof LabelPrimitive.Root>>
 * @returns ReactElement
 */
const FormLabel = forwardRef<ElementRef<typeof LabelPrimitive.Root>, FormLabelProps>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label ref={ref} className={cn(error ? "text-destructive" : "", className)} htmlFor={formItemId} {...props} />
  );
});
FormLabel.displayName = "FormLabel";

type FormControlProps = ComponentPropsWithoutRef<typeof Slot>;

/**
 * Component for form control with accessibility features.
 * @param props FormControlProps
 * @param ref Ref<ElementRef<typeof Slot>>
 * @returns ReactElement
 */
const FormControl = forwardRef<ElementRef<typeof Slot>, FormControlProps>((props, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={!error ? formDescriptionId : `${formDescriptionId} ${formMessageId}`}
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

interface FormDescriptionProps extends HTMLAttributes<HTMLParagraphElement> {}

/**
 * Component for form description.
 * @param props FormDescriptionProps
 * @param ref Ref<HTMLParagraphElement>
 * @returns ReactElement
 */
const FormDescription = forwardRef<HTMLParagraphElement, FormDescriptionProps>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p ref={ref} id={formDescriptionId} className={cn("text-sm text-muted-foreground", className)} {...props} />
  );
});
FormDescription.displayName = "FormDescription";

interface FormMessageProps extends HTMLAttributes<HTMLParagraphElement> {
  children?: React.ReactNode;
}

/**
 * Component for form error or message display.
 * @param props FormMessageProps
 * @param ref Ref<HTMLParagraphElement>
 * @returns ReactElement | null
 */
const FormMessage = forwardRef<HTMLParagraphElement, FormMessageProps>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error.message ?? "") : children;

  if (!body) {
    return null;
  }

  return (
    <p ref={ref} id={formMessageId} className={cn("text-sm font-medium text-destructive", className)} {...props}>
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

export { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField };