/**
 * Text wrapping and formatting utilities.
 */

/**
 * Wraps text into an array of strings, each representing a line that does not exceed the specified maximum characters per line.
 * 
 * @param text - The text to be wrapped.
 * @param maxCharsPerLine - The maximum number of characters allowed per line. Defaults to 18.
 * @returns An array of strings, each representing a line.
 */
export function wrapText(text: string, maxCharsPerLine: number = 18): string[] {
  if (!text) return [];
  
  const cleanText = text.trim().replace(/\s+/g, ' ');
  const words = cleanText.split(' ');
  const lines: string[] = [];
  let currentLine = '';
  
  words.forEach((word) => {
    if ((currentLine + word).length + 1 > maxCharsPerLine) {
      if (currentLine) {
        lines.push(currentLine);
        currentLine = word;
      } else {
        while (word.length > maxCharsPerLine) {
          lines.push(word.slice(0, maxCharsPerLine));
          word = word.slice(maxCharsPerLine);
        }
        currentLine = word;
      }
    } else {
      currentLine += `${currentLine ? ' ' : ''}${word}`;
    }
  });

  if (currentLine) lines.push(currentLine);
  
  return lines;
}

/**
 * Truncates text to a specified maximum length, preferring to break at word boundaries.
 * 
 * @param text - The text to be truncated.
 * @param maxLength - The maximum length of the text after truncation. Defaults to 25.
 * @returns The truncated text with an ellipsis appended if truncation occurs.
 */
export function truncateText(text: string, maxLength: number = 25): string {
  if (!text) return '';
  
  if (text.length <= maxLength) return text;
  
  const truncated = text.slice(0, maxLength);
  const lastSpace = truncated.lastIndexOf(' ');
  
  if (lastSpace > -1 && lastSpace > maxLength * 0.5) {
    return `${truncated.slice(0, lastSpace)}...`;
  }
  
  return `${truncated}...`;
}

/**
 * Calculates an optimal font size based on the text length and container height.
 * 
 * @param textLength - The length of the text.
 * @param containerHeight - The height of the container in pixels.
 * @returns The calculated font size.
 */
export function getOptimalFontSize(textLength: number, containerHeight: number): number {
  let fontSize = containerHeight > 60 ? 9 : containerHeight > 40 ? 8 : 7;
  fontSize = textLength > 30 ? Math.max(fontSize - 1, 6) : fontSize;
  
  return fontSize;
}