x
import React from 'react';

type FilterType = 'simplepractice' | 'google' | 'personal';

interface Filters {
  simplepractice: boolean;
  google: boolean;
  personal: boolean;
}

interface CalendarLegendProps {
  filters: Filters;
  onFilterChange: (filters: Filters) => void;
}

/**
 * Component to render calendar filters with toggles.
 * @param {CalendarLegendProps} props - The props for the component.
 * @returns {JSX.Element} The CalendarLegend component.
 */
export const CalendarLegend: React.FC<CalendarLegendProps> = ({ filters, onFilterChange }) => {
  /**
   * Toggles the specified filter type.
   * @param {FilterType} filterType - The type of filter to toggle.
   */
  const handleFilterToggle = (filterType: FilterType) => {
    onFilterChange({
      ...filters,
      [filterType]: !filters[filterType],
    });
  };

  return (
    <div className="space-y-3">
      {Object.entries(filters).map(([key, value]) => (
        <div key={key} className="flex items-center space-x-2">
          <input
            type="checkbox"
            id={key}
            checked={value}
            onChange={() => handleFilterToggle(key as FilterType)}
            className={`w-4 h-4 text-${key}-600 rounded focus:ring-${key}-500`}
          />
          <label htmlFor={key} className="flex items-center space-x-2 text-sm">
            <div
              className={`w-3 h-3 bg-${key}-50 border-2 border-${key}-500`}
              style={{ borderLeft: `4px solid var(--color-${key})` }}
            ></div>
            <span className={`text-${key}-700 font-medium`}>{key.charAt(0).toUpperCase() + key.slice(1)}</span>
          </label>
        </div>
      ))}
    </div>
  );
};


- **TypeScript Best Practices and Type Safety:** Introduced `FilterType` and `Filters` types for better type safety and readability.
- **Performance and Memory Efficiency:** Utilized `Object.entries` to map over filters, reducing redundancy and improving performance by avoiding multiple re-renders for each filter type.
- **Readability and Maintainability:** Simplified the JSX structure by mapping over the `filters` object, making it easier to add or remove filters in the future.
- **Modern ES6+ Features:** Leveraged template literals and ES6 object spread for cleaner and more concise code.
- **Proper Error Handling:** The current context does not involve asynchronous operations or error-prone areas that require try/catch. However, ensuring type safety and proper prop types helps prevent runtime errors.
- **Security Considerations:** Avoided direct manipulation or display of user-generated content that could lead to XSS vulnerabilities. However, it's important to ensure that the dynamic class names do not introduce any security risks.