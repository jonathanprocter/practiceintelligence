// COMPLETE FIX for 3-column layout with notes and action items

function drawRemarkableDailyAppointments(pdf: jsPDF, selectedDate: Date, events: CalendarEvent[], gridStartY: number, dayColumnWidth: number, timeSlotHeight: number): void {
  const { margin, timeColumnWidth } = REMARKABLE_DAILY_CONFIG;
  
  // Filter events for the selected day
  const dayEvents = events.filter(event => {
    const eventDate = new Date(event.startTime);
    return eventDate.getFullYear() === selectedDate.getFullYear() &&
           eventDate.getMonth() === selectedDate.getMonth() &&
           eventDate.getDate() === selectedDate.getDate();
  }).sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime());
  
  console.log(`=== RENDERING ${dayEvents.length} EVENTS WITH 3-COLUMN LAYOUT ===`);
  
  dayEvents.forEach((event, index) => {
    const eventDate = new Date(event.startTime);
    const endDate = new Date(event.endTime);
    const startHour = eventDate.getHours();
    const startMinute = eventDate.getMinutes();
    const endHour = endDate.getHours();
    const endMinute = endDate.getMinutes();
    
    console.log(`\n--- Event ${index + 1}: "${event.title}" ---`);
    console.log(`Has notes: ${!!(event.notes && event.notes.trim())}`);
    console.log(`Has action items: ${!!(event.actionItems && event.actionItems.trim())}`);
    
    // Calculate position based on 30-minute slots from 6:00
    const startMinutesFrom6 = (startHour - 6) * 60 + startMinute;
    const endMinutesFrom6 = (endHour - 6) * 60 + endMinute;
    const startSlot = Math.max(0, startMinutesFrom6 / 30);
    const endSlot = Math.min(35, endMinutesFrom6 / 30);
    const durationSlots = Math.max(2, endSlot - startSlot);
    
    if (startSlot < 0 || startSlot > 35) {
      console.log('Event outside time range, skipping');
      return;
    }
    
    // Check if event has notes or action items for expanded layout
    const hasNotes = !!(event.notes && event.notes.trim());
    const hasActionItems = !!(event.actionItems && event.actionItems.trim());
    const needsExpandedLayout = hasNotes || hasActionItems;
    
    // Position calculation
    const eventX = margin + timeColumnWidth + 3;
    const eventY = gridStartY + (startSlot * timeSlotHeight) + 1;
    const eventWidth = dayColumnWidth - 6;
    
    // Adjust height based on content - taller for events with notes/action items
    let eventHeight;
    if (needsExpandedLayout) {
      // Calculate height needed for notes and action items
      const notesLines = hasNotes ? event.notes!.split('\n').filter(line => line.trim()).length : 0;
      const actionLines = hasActionItems ? event.actionItems!.split('\n').filter(line => line.trim()).length : 0;
      const maxContentLines = Math.max(notesLines, actionLines);
      const minimumHeight = 60 + (maxContentLines * 10); // Base height + content
      eventHeight = Math.max(minimumHeight, (durationSlots * timeSlotHeight) - 2);
    } else {
      eventHeight = Math.max(55, (durationSlots * timeSlotHeight) - 2);
    }
    
    console.log(`Position: X=${eventX}, Y=${eventY}, Width=${eventWidth}, Height=${eventHeight}`);
    console.log(`Expanded layout: ${needsExpandedLayout}`);
    
    // Determine event type
    const isSimplePractice = event.source === 'simplepractice' || 
                           event.title.toLowerCase().includes('appointment') ||
                           event.calendarId?.includes('simplepractice') ||
                           event.calendarId === '0np7sib5u30o7oc297j5pb259g';
    
    const isHoliday = event.title.toLowerCase().includes('holiday') ||
                     event.calendarId === 'en.usa#holiday@group.v.calendar.google.com';
    
    const isGoogle = event.source === 'google' && !isSimplePractice && !isHoliday;
    
    // Draw event background (WHITE)
    pdf.setFillColor(255, 255, 255);
    pdf.rect(eventX, eventY, eventWidth, eventHeight, 'F');
    
    // Draw borders based on event type
    if (isSimplePractice) {
      pdf.setDrawColor(66, 133, 244);
      pdf.setLineWidth(4);
      pdf.line(eventX, eventY, eventX, eventY + eventHeight);
      
      pdf.setDrawColor(200, 200, 200);
      pdf.setLineWidth(0.5);
      pdf.line(eventX + 4, eventY, eventX + eventWidth, eventY);
      pdf.line(eventX + eventWidth, eventY, eventX + eventWidth, eventY + eventHeight);
      pdf.line(eventX, eventY + eventHeight, eventX + eventWidth, eventY + eventHeight);
      
    } else if (isGoogle) {
      pdf.setDrawColor(52, 168, 83);
      pdf.setLineWidth(2);
      pdf.setLineDash([4, 2]);
      pdf.rect(eventX, eventY, eventWidth, eventHeight);
      pdf.setLineDash([]);
      
    } else if (isHoliday) {
      pdf.setFillColor(251, 188, 4);
      pdf.rect(eventX, eventY, eventWidth, eventHeight, 'F');
      pdf.setDrawColor(255, 152, 0);
      pdf.setLineWidth(1);
      pdf.rect(eventX, eventY, eventWidth, eventHeight);
      
    } else {
      pdf.setDrawColor(156, 163, 175);
      pdf.setLineWidth(1);
      pdf.rect(eventX, eventY, eventWidth, eventHeight);
    }
    
    // === TEXT RENDERING - 3 COLUMN LAYOUT ===
    const padding = isSimplePractice ? 8 : 6;
    const startX = eventX + padding;
    const contentWidth = eventWidth - (padding * 2);
    
    if (needsExpandedLayout) {
      // === 3-COLUMN LAYOUT ===
      const col1Width = contentWidth * 0.33; // Left: Event info
      const col2Width = contentWidth * 0.33; // Center: Notes  
      const col3Width = contentWidth * 0.33; // Right: Action items
      
      const col1X = startX;
      const col2X = startX + col1Width + 5;
      const col3X = startX + col1Width + col2Width + 10;
      
      // Draw column dividers for clarity
      pdf.setDrawColor(220, 220, 220);
      pdf.setLineWidth(0.5);
      pdf.line(col2X - 3, eventY + 5, col2X - 3, eventY + eventHeight - 5);
      pdf.line(col3X - 3, eventY + 5, col3X - 3, eventY + eventHeight - 5);
      
      // === COLUMN 1: Event Info ===
      let col1Y = eventY + 15;
      
      // Event title
      const cleanTitle = event.title.replace(/ Appointment$/, '').trim();
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(0, 0, 0);
      
      const titleLines = pdf.splitTextToSize(cleanTitle, col1Width - 5);
      for (let i = 0; i < Math.min(titleLines.length, 2); i++) {
        pdf.text(titleLines[i], col1X, col1Y);
        col1Y += 11;
      }
      
      // Source
      pdf.setFontSize(7);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(100, 100, 100);
      
      let sourceText = '';
      if (isSimplePractice) sourceText = 'SIMPLEPRACTICE';
      else if (isGoogle) sourceText = 'GOOGLE CALENDAR';
      else if (isHoliday) sourceText = 'HOLIDAYS IN UNITED STATES';
      else sourceText = (event.source || 'MANUAL').toUpperCase();
      
      pdf.text(sourceText, col1X, col1Y);
      col1Y += 10;
      
      // Time
      pdf.setFontSize(8);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(0, 0, 0);
      
      const startTimeStr = eventDate.toLocaleTimeString('en-US', { 
        hour: '2-digit', minute: '2-digit', hour12: false 
      });
      const endTimeStr = endDate.toLocaleTimeString('en-US', { 
        hour: '2-digit', minute: '2-digit', hour12: false 
      });
      const timeRange = `${startTimeStr}-${endTimeStr}`;
      
      pdf.text(timeRange, col1X, col1Y);
      
      // === COLUMN 2: Event Notes ===
      if (hasNotes) {
        let col2Y = eventY + 15;
        
        // Header
        pdf.setFontSize(8);
        pdf.setFont('helvetica', 'bold');
        pdf.setTextColor(0, 0, 0);
        pdf.text('Event Notes', col2X, col2Y);
        col2Y += 12;
        
        // Notes content
        pdf.setFontSize(7);
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(0, 0, 0);
        
        const noteLines = event.notes!.split('\n').filter(line => line.trim());
        noteLines.forEach(note => {
          const cleanNote = note.trim().replace(/^[•\s-]+/, '').trim();
          if (cleanNote && col2Y + 8 <= eventY + eventHeight - 5) {
            // Add bullet point
            pdf.text('•', col2X, col2Y);
            // Wrap text if needed
            const wrappedNote = pdf.splitTextToSize(cleanNote, col2Width - 10);
            for (let i = 0; i < Math.min(wrappedNote.length, 2); i++) {
              pdf.text(wrappedNote[i], col2X + 8, col2Y + (i * 8));
            }
            col2Y += Math.min(wrappedNote.length, 2) * 8 + 2;
          }
        });
      }
      
      // === COLUMN 3: Action Items ===
      if (hasActionItems) {
        let col3Y = eventY + 15;
        
        // Header
        pdf.setFontSize(8);
        pdf.setFont('helvetica', 'bold');
        pdf.setTextColor(0, 0, 0);
        pdf.text('Action Items', col3X, col3Y);
        col3Y += 12;
        
        // Action items content
        pdf.setFontSize(7);
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(0, 0, 0);
        
        const actionLines = event.actionItems!.split('\n').filter(line => line.trim());
        actionLines.forEach(action => {
          const cleanAction = action.trim().replace(/^[•\s-]+/, '').trim();
          if (cleanAction && col3Y + 8 <= eventY + eventHeight - 5) {
            // Add bullet point
            pdf.text('•', col3X, col3Y);
            // Wrap text if needed
            const wrappedAction = pdf.splitTextToSize(cleanAction, col3Width - 10);
            for (let i = 0; i < Math.min(wrappedAction.length, 2); i++) {
              pdf.text(wrappedAction[i], col3X + 8, col3Y + (i * 8));
            }
            col3Y += Math.min(wrappedAction.length, 2) * 8 + 2;
          }
        });
      }
      
    } else {
      // === SIMPLE LAYOUT (No notes/action items) ===
      let currentY = eventY + 15;
      
      // Event title
      const cleanTitle = event.title.replace(/ Appointment$/, '').trim();
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(0, 0, 0);
      
      const titleLines = pdf.splitTextToSize(cleanTitle, contentWidth);
      for (let i = 0; i < Math.min(titleLines.length, 2); i++) {
        pdf.text(titleLines[i], startX, currentY);
        currentY += 12;
      }
      
      // Source
      pdf.setFontSize(8);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(100, 100, 100);
      
      let sourceText = '';
      if (isSimplePractice) sourceText = 'SIMPLEPRACTICE';
      else if (isGoogle) sourceText = 'GOOGLE CALENDAR';
      else if (isHoliday) sourceText = 'HOLIDAYS IN UNITED STATES';
      else sourceText = (event.source || 'MANUAL').toUpperCase();
      
      pdf.text(sourceText, startX, currentY);
      currentY += 10;
      
      // Time
      pdf.setFontSize(9);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(0, 0, 0);
      
      const startTimeStr = eventDate.toLocaleTimeString('en-US', { 
        hour: '2-digit', minute: '2-digit', hour12: false 
      });
      const endTimeStr = endDate.toLocaleTimeString('en-US', { 
        hour: '2-digit', minute: '2-digit', hour12: false 
      });
      const timeRange = `${startTimeStr}-${endTimeStr}`;
      
      pdf.text(timeRange, startX, currentY);
    }
    
    console.log(`Finished rendering event ${index + 1}`);
  });
}

// ALSO: Extend time grid to 23:30
function drawDailyGrid(pdf: jsPDF, selectedDate: Date, events: CalendarEvent[]): void {
  const { margin, pageWidth, timeColumnWidth, timeSlotHeight } = REMARKABLE_DAILY_CONFIG;
  const gridY = REMARKABLE_DAILY_CONFIG.gridStartY;
  const dayColumnWidth = REMARKABLE_DAILY_CONFIG.dayColumnWidth;
  
  // EXTENDED time slots (6:00 to 23:30) - FULL RANGE
  const timeSlots = [];
  for (let hour = 6; hour <= 23; hour++) {
    for (let minute = 0; minute < 60; minute += 30) {
      timeSlots.push({
        time: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`,
        hour,
        minute,
        isHour: minute === 0
      });
      if (hour === 23 && minute === 30) break; // Stop at 23:30
    }
  }
  
  console.log(`Created ${timeSlots.length} time slots from ${timeSlots[0].time} to ${timeSlots[timeSlots.length-1].time}`);
  
  const totalGridHeight = timeSlots.length * timeSlotHeight;
  const headerHeight = 30;
  
  // === GRID BACKGROUND ===
  pdf.setFillColor(255, 255, 255);
  pdf.rect(margin, gridY, timeColumnWidth + dayColumnWidth, headerHeight + totalGridHeight, 'F');
  
  // === GRID BORDER ===
  pdf.setLineWidth(2);
  pdf.setDrawColor(0, 0, 0);
  pdf.rect(margin, gridY, timeColumnWidth + dayColumnWidth, headerHeight + totalGridHeight);
  
  // === HEADERS ===
  // Time column header
  pdf.setFillColor(245, 245, 245);
  pdf.rect(margin, gridY, timeColumnWidth, headerHeight, 'F');
  
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'bold');
  pdf.setTextColor(0, 0, 0);
  pdf.text('TIME', margin + timeColumnWidth / 2, gridY + 20, { align: 'center' });
  
  // Day header
  const dayX = margin + timeColumnWidth;
  pdf.setFillColor(245, 245, 245);
  pdf.rect(dayX, gridY, dayColumnWidth, headerHeight, 'F');
  
  const dayName = selectedDate.toLocaleDateString('en-US', { weekday: 'long' });
  const dateStr = selectedDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
  
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'bold');
  pdf.text(dayName, dayX + dayColumnWidth / 2, gridY + 15, { align: 'center' });
  
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text(dateStr, dayX + dayColumnWidth / 2, gridY + 25, { align: 'center' });
  
  // === TIME GRID ===
  timeSlots.forEach((slot, index) => {
    const y = gridY + headerHeight + (index * timeSlotHeight);
    
    // Time column cell
    pdf.setFillColor(248, 248, 248);
    pdf.rect(margin, y, timeColumnWidth, timeSlotHeight, 'F');
    
    // Time text
    pdf.setFontSize(8);
    pdf.setFont('helvetica', slot.isHour ? 'bold' : 'normal');
    pdf.setTextColor(0, 0, 0);
    pdf.text(slot.time, margin + timeColumnWidth / 2, y + timeSlotHeight / 2 + 3, { align: 'center' });
    
    // Day cell
    pdf.setFillColor(255, 255, 255);
    pdf.rect(dayX, y, dayColumnWidth, timeSlotHeight, 'F');
    
    // Horizontal grid lines
    pdf.setLineWidth(0.5);
    pdf.setDrawColor(220, 220, 220);
    pdf.line(margin, y + timeSlotHeight, margin + timeColumnWidth + dayColumnWidth, y + timeSlotHeight);
  });
  
  // === VERTICAL GRID LINES ===
  pdf.setLineWidth(2);
  pdf.setDrawColor(0, 0, 0);
  pdf.line(margin + timeColumnWidth, gridY, margin + timeColumnWidth, gridY + headerHeight + totalGridHeight);
  
  // Header separator
  pdf.setLineWidth(1);
  pdf.setDrawColor(0, 0, 0);
  pdf.line(margin, gridY + headerHeight, margin + timeColumnWidth + dayColumnWidth, gridY + headerHeight);
  
  // === EVENTS ===
  drawRemarkableDailyAppointments(pdf, selectedDate, events, gridY + headerHeight, dayColumnWidth, timeSlotHeight);
}