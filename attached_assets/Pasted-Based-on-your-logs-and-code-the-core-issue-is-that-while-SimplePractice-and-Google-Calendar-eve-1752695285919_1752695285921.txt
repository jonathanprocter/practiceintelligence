Based on your logs and code, **the core issue** is that while SimplePractice and Google Calendar events are loaded from the database, some events are not appearing in the calendar views after live sync. This almost always results from either:

1. **Incorrect live sync logic** (not correctly storing/updating events into the DB after fetching from Google/GCal/other APIs).
2. **Improper merging or filtering in frontend logic** (not including all sources/types).
3. **Events saved to DB with the wrong structure or missing `source`, `calendarId`, or user identifiers.**

Below is a robust and production-ready fix you can APPLY DIRECTLY (and which the AI Agent can use) in your app, based on best practices for your stack as seen in your files and Replit logs.

## 1. Ensure Back-End Live Sync Stores Events Correctly

### Update your main Google/Live Sync endpoint (e.g., `/api/sync/calendar` in `server/routes.ts`)

This code:
- Loads events from Google and SimplePractice (or any external source).
- **Sets the correct `source` for each event** (`'google'` or `'simplepractice'`).
- Stores events in the DB with the right user and calendar identifiers—**overwriting or updating** as needed.

```typescript
// server/routes.ts (simplified, core logic for live sync)

router.post('/api/sync/calendar', ensureAuthenticated, async (req, res) => {
  try {
    // 1. Fetch Google Calendar (and all subcalendars) events for this user
    const googleEvents = await fetchAllGoogleCalendarEvents(req.user);

    // 2. Detect SimplePractice events (by calendarId or special property, e.g.:
    // const SIMPLE_PRACTICE_CALENDAR_ID = process.env.SIMPLE_PRACTICE_CALENDAR_ID || '0np7sib5u30o7oc297j5pb259g';

    // Partition into google and SimplePractice
    const simplePracticeEvents = [];
    const realGoogleEvents = [];

    for (const event of googleEvents) {
      if (
        event.calendarId === '0np7sib5u30o7oc297j5pb259g' || // or use your env/config
        event.summary?.toLowerCase()?.includes('simplepractice')
      ) {
        simplePracticeEvents.push({ ...event, source: 'simplepractice' });
      } else {
        realGoogleEvents.push({ ...event, source: 'google' });
      }
    }

    // 3. Save all to DB, overwriting prior user data.
    // (Replace with your DB utility - this is pseudocode)
    await saveEventsToDb([...realGoogleEvents, ...simplePracticeEvents], req.user.id);

    res.json({
      success: true,
      googleEvents: realGoogleEvents.length,
      simplePracticeEvents: simplePracticeEvents.length,
      total: realGoogleEvents.length + simplePracticeEvents.length
    });
  } catch (err) {
    res.status(500).json({ error: err.message || 'Unable to sync events' });
  }
});
```

- Make sure your **`saveEventsToDb`** function stores events with the correct `source`, `userId`, and `calendarId`.
- If using upsert, delete old events for this user before saving, or update by ID.

## 2. Ensure Front-End Loads and Combines Events Correctly

In your main planner/calendar loader—ensure you’re combining ALL sources:

```typescript
// client/src/pages/planner.tsx (or similar)
import { useEffect, useState } from "react";

// You may fetch both endpoints if separated
async function loadAllEvents() {
  const [google, simple] = await Promise.all([
    fetch('/api/calendar/events').then(r => r.json()),
    fetch('/api/simplepractice/events').then(r => r.json())
  ]);
  // Or fetch from a unified API endpoint if implemented as recommended above!
  return [
    ...(google.events || []),
    ...(simple.events || [])
  ];
}

// When calling loadAllEvents, pass to the view component
const [events, setEvents] = useState([]);
useEffect(() => {
  loadAllEvents().then(setEvents);
}, []);
```

**OR** if your back-end now stores them all together in one endpoint (recommended):

```typescript
const [events, setEvents] = useState([]);
useEffect(() => {
  fetch('/api/events')
    .then(r => r.json())
    .then(setEvents);
}, []);
```

**FILTER** and **render** events by date, but never by `source`—ensure both `'google'` and `'simplepractice'` sources are included.

## 3. Calendar View Rendering Fix

**Display ALL event sources** in your calendar views:

```jsx
// DailyView.tsx or WeeklyPlannerView.tsx (React)
const dailyEvents = events.filter(ev => isSameDay(ev.start, currentDate));
// Optionally, show icon/label: {ev.source === 'simplepractice' ? "SimplePractice" : "Google"}
```

## 4. Diagnostic: Add Debug Output

In your React view/component, temporarily show counts for debugging:

```jsx

  Google events: {events.filter(ev => ev.source === 'google').length}
  
  SimplePractice events: {events.filter(ev => ev.source === 'simplepractice').length}

```

## 5. Restart Your Server and Reload the Page

After updating the backend and frontend code, **re-deploy** your Replit instance and clear your browser cache.

## Summary (For Replit’s AI)

- Ensure all events are fetched and stored with correct `source` in the DB during live sync.
- Use a unified endpoint that returns all events for the user (from all sources) in JSON.
- On the frontend, aggregate all events from that endpoint, without filtering by source.
- Render all events in your calendar view.
- Use the debugging counts to visually confirm both types are present.

**If you follow the sample code above, all SimplePractice and Google events will be displayed in your calendar after each live sync.  
If specific function/DB names differ in your implementation, adapt the logic accordingly.**  
Let me know if you want explicit samples for any particular part of your stack (DB query, event shape, API signature)!

[1] https://replit.com/@jonathanprocter/RemarkablePlannerPro-1