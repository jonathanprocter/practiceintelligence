// ===== 1. OAuth Configuration and Setup =====
import { google } from 'googleapis';
import { OAuth2Client } from 'google-auth-library';

interface UserTokens {
  access_token: string;
  refresh_token: string;
  expiry_date?: number;
  token_type?: string;
  scope?: string;
}

interface User {
  id: string;
  email: string;
  tokens?: UserTokens;
}

class GoogleOAuthManager {
  private oauth2Client: OAuth2Client;
  private readonly SCOPES = [
    'https://www.googleapis.com/auth/calendar.readonly',
    'https://www.googleapis.com/auth/calendar.events',
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile'
  ];

  constructor() {
    // NEVER use dev tokens in production - only real OAuth credentials
    this.oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI || `${process.env.BASE_URL}/auth/google/callback`
    );
  }

  // ===== 2. Generate OAuth URL (Force Fresh Consent) =====
  generateAuthUrl(userId: string): string {
    return this.oauth2Client.generateAuthUrl({
      access_type: 'offline', // Required for refresh_token
      prompt: 'consent',      // FORCE new refresh_token every time
      scope: this.SCOPES,
      state: userId,          // Pass user ID for callback
      include_granted_scopes: true
    });
  }

  // ===== 3. OAuth Callback Handler (Save Real Tokens) =====
  async handleOAuthCallback(code: string, userId: string): Promise<UserTokens> {
    try {
      // Exchange code for tokens
      const { tokens } = await this.oauth2Client.getToken(code);
      
      // Validate we got a refresh token
      if (!tokens.refresh_token) {
        throw new Error('No refresh token received. User must grant offline access.');
      }

      // Validate required tokens
      if (!tokens.access_token) {
        throw new Error('No access token received from Google OAuth.');
      }

      console.log('‚úÖ Successfully obtained OAuth tokens:', {
        has_refresh_token: !!tokens.refresh_token,
        has_access_token: !!tokens.access_token,
        expires_in: tokens.expiry_date,
        user_id: userId
      });

      // Save tokens to storage (implement your storage logic)
      await this.saveUserTokens(userId, tokens as UserTokens);

      return tokens as UserTokens;
    } catch (error) {
      console.error('‚ùå OAuth callback failed:', error);
      throw new Error(`OAuth authentication failed: ${error.message}`);
    }
  }

  // ===== 4. Token Storage (Replace with your DB/storage) =====
  private async saveUserTokens(userId: string, tokens: UserTokens): Promise<void> {
    try {
      // Example with JSON file storage - replace with your DB
      const fs = require('fs').promises;
      const path = `./data/user_tokens_${userId}.json`;
      
      await fs.writeFile(path, JSON.stringify({
        userId,
        tokens,
        savedAt: new Date().toISOString()
      }, null, 2));

      console.log(`‚úÖ Tokens saved for user ${userId}`);
    } catch (error) {
      console.error(`‚ùå Failed to save tokens for user ${userId}:`, error);
      throw error;
    }
  }

  // ===== 5. Token Retrieval (No Dev Token Fallbacks!) =====
  private async getUserTokens(userId: string): Promise<UserTokens | null> {
    try {
      // Example with JSON file storage - replace with your DB
      const fs = require('fs').promises;
      const path = `./data/user_tokens_${userId}.json`;
      
      const data = await fs.readFile(path, 'utf8');
      const { tokens } = JSON.parse(data);
      return tokens;
    } catch (error) {
      console.log(`No tokens found for user ${userId}`);
      return null;
    }
  }

  // ===== 6. Token Refresh Logic (Handle Invalid Grants) =====
  async refreshTokensIfNeeded(userId: string): Promise<OAuth2Client> {
    const tokens = await this.getUserTokens(userId);
    
    if (!tokens) {
      throw new Error('AUTHENTICATION_REQUIRED: No tokens found for user');
    }

    this.oauth2Client.setCredentials(tokens);

    try {
      // Check if access token is expired and refresh if needed
      if (tokens.expiry_date && Date.now() >= tokens.expiry_date) {
        console.log('üîÑ Access token expired, refreshing...');
        
        const { credentials } = await this.oauth2Client.refreshAccessToken();
        
        // Save refreshed tokens
        const updatedTokens = { ...tokens, ...credentials };
        await this.saveUserTokens(userId, updatedTokens);
        
        console.log('‚úÖ Tokens refreshed successfully');
      }

      return this.oauth2Client;
    } catch (error) {
      console.error('‚ùå Token refresh failed:', error);
      
      // If refresh fails with invalid_grant, tokens are completely invalid
      if (error.message.includes('invalid_grant')) {
        console.log('üîë Refresh token invalid, requiring re-authentication');
        
        // Delete invalid tokens
        await this.clearUserTokens(userId);
        
        throw new Error('REAUTHENTICATION_REQUIRED: Refresh token is invalid');
      }
      
      throw error;
    }
  }

  // ===== 7. Clear Invalid Tokens =====
  private async clearUserTokens(userId: string): Promise<void> {
    try {
      const fs = require('fs').promises;
      const path = `./data/user_tokens_${userId}.json`;
      await fs.unlink(path);
      console.log(`üóëÔ∏è Cleared invalid tokens for user ${userId}`);
    } catch (error) {
      // File might not exist, that's fine
    }
  }

  // ===== 8. Calendar Sync with Proper Authentication =====
  async syncCalendarEvents(userId: string, calendarId: string = 'primary') {
    try {
      // Get authenticated client (will refresh tokens if needed)
      const authClient = await this.refreshTokensIfNeeded(userId);
      
      // Create calendar instance
      const calendar = google.calendar({ version: 'v3', auth: authClient });
      
      // Fetch events
      const response = await calendar.events.list({
        calendarId,
        timeMin: new Date().toISOString(),
        timeMax: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // Next 30 days
        singleEvents: true,
        orderBy: 'startTime',
        maxResults: 100
      });

      console.log(`‚úÖ Successfully synced ${response.data.items?.length || 0} calendar events`);
      return response.data.items || [];

    } catch (error) {
      console.error('‚ùå Calendar sync failed:', error);
      
      if (error.message.includes('AUTHENTICATION_REQUIRED') || 
          error.message.includes('REAUTHENTICATION_REQUIRED')) {
        throw error; // Let the frontend handle re-auth
      }
      
      throw new Error(`Calendar sync failed: ${error.message}`);
    }
  }

  // ===== 9. Check Authentication Status =====
  async checkAuthStatus(userId: string): Promise<{ isAuthenticated: boolean; hasValidTokens: boolean }> {
    try {
      const tokens = await this.getUserTokens(userId);
      
      if (!tokens || !tokens.refresh_token) {
        return { isAuthenticated: false, hasValidTokens: false };
      }

      // Try to refresh tokens to verify they're valid
      await this.refreshTokensIfNeeded(userId);
      return { isAuthenticated: true, hasValidTokens: true };
      
    } catch (error) {
      if (error.message.includes('AUTHENTICATION_REQUIRED') || 
          error.message.includes('REAUTHENTICATION_REQUIRED')) {
        return { isAuthenticated: false, hasValidTokens: false };
      }
      
      // Other errors
      console.error('Auth status check failed:', error);
      return { isAuthenticated: false, hasValidTokens: false };
    }
  }
}

// ===== 10. Express Route Handlers =====
import express from 'express';

const app = express();
const oauthManager = new GoogleOAuthManager();

// Start OAuth flow
app.get('/auth/google', async (req, res) => {
  try {
    const userId = req.user?.id || req.session?.userId;
    if (!userId) {
      return res.status(401).json({ error: 'User ID required' });
    }

    const authUrl = oauthManager.generateAuthUrl(userId);
    res.redirect(authUrl);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// OAuth callback
app.get('/auth/google/callback', async (req, res) => {
  try {
    const { code, state: userId } = req.query;
    
    if (!code || !userId) {
      return res.status(400).json({ error: 'Missing code or user ID' });
    }

    await oauthManager.handleOAuthCallback(code as string, userId as string);
    
    // Redirect to success page
    res.redirect('/dashboard?auth=success');
  } catch (error) {
    console.error('OAuth callback error:', error);
    res.redirect('/dashboard?auth=error&message=' + encodeURIComponent(error.message));
  }
});

// Check auth status
app.get('/api/auth/status', async (req, res) => {
  try {
    const userId = req.user?.id || req.session?.userId;
    if (!userId) {
      return res.json({ isAuthenticated: false, hasValidTokens: false });
    }

    const status = await oauthManager.checkAuthStatus(userId);
    res.json(status);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Calendar sync endpoint
app.get('/api/calendar/sync', async (req, res) => {
  try {
    const userId = req.user?.id || req.session?.userId;
    if (!userId) {
      return res.status(401).json({ error: 'Authentication required' });
    }

    const events = await oauthManager.syncCalendarEvents(userId);
    res.json({ success: true, events, count: events.length });
    
  } catch (error) {
    console.error('Calendar sync endpoint error:', error);
    
    if (error.message.includes('AUTHENTICATION_REQUIRED') || 
        error.message.includes('REAUTHENTICATION_REQUIRED')) {
      return res.status(401).json({ 
        error: 'Authentication required', 
        requireReauth: true 
      });
    }
    
    res.status(500).json({ error: error.message });
  }
});

// ===== 11. Environment Variables (REMOVE ALL DEV TOKENS!) =====
/*
Create/update your .env file with ONLY these variables:

GOOGLE_CLIENT_ID=your_real_client_id
GOOGLE_CLIENT_SECRET=your_real_client_secret
GOOGLE_REDIRECT_URI=https://your-app.replit.dev/auth/google/callback
BASE_URL=https://your-app.replit.dev

DO NOT INCLUDE:
GOOGLE_REFRESH_TOKEN=dev-refresh  ‚Üê DELETE THIS
GOOGLE_ACCESS_TOKEN=dev-access    ‚Üê DELETE THIS

Let users authenticate through OAuth flow only!
*/

// ===== 12. Frontend Integration =====
/*
Add this JavaScript to your frontend to handle re-authentication:

// Check auth status on page load
async function checkAuthStatus() {
  try {
    const response = await fetch('/api/auth/status');
    const { isAuthenticated, hasValidTokens } = await response.json();
    
    if (!isAuthenticated || !hasValidTokens) {
      showConnectGoogleButton();
    } else {
      hideConnectGoogleButton();
      syncCalendar();
    }
  } catch (error) {
    console.error('Auth status check failed:', error);
    showConnectGoogleButton();
  }
}

// Sync calendar with error handling
async function syncCalendar() {
  try {
    const response = await fetch('/api/calendar/sync');
    
    if (response.status === 401) {
      const { requireReauth } = await response.json();
      if (requireReauth) {
        showConnectGoogleButton();
        showMessage('Please reconnect your Google account');
        return;
      }
    }
    
    const { events } = await response.json();
    displayCalendarEvents(events);
    
  } catch (error) {
    console.error('Calendar sync failed:', error);
    showMessage('Failed to sync calendar. Please try again.');
  }
}

// Connect Google button handler
function connectGoogle() {
  window.location.href = '/auth/google';
}
*/

export { GoogleOAuthManager };