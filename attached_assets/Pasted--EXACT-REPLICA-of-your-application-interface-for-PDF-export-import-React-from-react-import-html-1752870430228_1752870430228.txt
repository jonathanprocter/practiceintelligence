// EXACT REPLICA of your application interface for PDF export
import React from 'react';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

interface AppointmentData {
  id: string;
  startTime: string;
  endTime: string;
  clientName: string;
  status: 'confirmed' | 'clinician_canceled' | 'client_canceled';
  title?: string;
}

// EXACT replica component matching your application's daily view
const ApplicationReplicaPDF: React.FC<{ appointments: AppointmentData[] }> = ({ appointments }) => {
  // Generate time slots exactly like your application
  const generateTimeSlots = () => {
    const slots = [];
    for (let hour = 6; hour <= 18; hour++) {
      slots.push({
        time: `${hour.toString().padStart(2, '0')}:00`,
        displayTime: `${hour.toString().padStart(2, '0')}:00`
      });
      if (hour < 18) {
        slots.push({
          time: `${hour.toString().padStart(2, '0')}:30`,
          displayTime: `${hour.toString().padStart(2, '0')}:30`
        });
      }
    }
    slots.push({
      time: '19:00',
      displayTime: '19:00'
    });
    return slots;
  };

  const timeSlots = generateTimeSlots();
  
  // Map appointments to time slots
  const appointmentsByTime = appointments.reduce((acc, apt) => {
    acc[apt.startTime] = apt;
    return acc;
  }, {} as Record<string, AppointmentData>);

  // Calculate metrics like your application
  const totalAppointments = appointments.length;
  const scheduledHours = totalAppointments; // Assuming 1hr each
  const availableHours = 12 - scheduledHours; // 6AM-6PM = 12hrs
  const freeTimePercentage = Math.round((availableHours / 12) * 100);

  return (
    <div style={{
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',
      background: '#ffffff',
      width: '1000px',
      minHeight: '1400px',
      padding: '20px',
      boxSizing: 'border-box'
    }}>
      {/* Header matching your application */}
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'flex-start',
        marginBottom: '20px',
        paddingBottom: '15px',
        borderBottom: '1px solid #e1e5e9'
      }}>
        <div>
          <h1 style={{
            fontSize: '20px',
            fontWeight: '600',
            margin: '0 0 5px 0',
            color: '#1a1a1a'
          }}>
            Friday, July 18, 2025
          </h1>
          <p style={{
            fontSize: '13px',
            color: '#6c757d',
            margin: '0'
          }}>
            {totalAppointments} appointments
          </p>
        </div>

        {/* Stats matching your application */}
        <div style={{
          display: 'flex',
          gap: '30px',
          alignItems: 'center'
        }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{
              fontSize: '16px',
              fontWeight: '600',
              color: '#1a1a1a',
              lineHeight: '1.2'
            }}>
              {totalAppointments}
            </div>
            <div style={{
              fontSize: '11px',
              color: '#6c757d',
              marginTop: '2px'
            }}>
              Appointments
            </div>
          </div>
          <div style={{ textAlign: 'center' }}>
            <div style={{
              fontSize: '16px',
              fontWeight: '600',
              color: '#1a1a1a',
              lineHeight: '1.2'
            }}>
              {scheduledHours}.0h
            </div>
            <div style={{
              fontSize: '11px',
              color: '#6c757d',
              marginTop: '2px'
            }}>
              Scheduled
            </div>
          </div>
          <div style={{ textAlign: 'center' }}>
            <div style={{
              fontSize: '16px',
              fontWeight: '600',
              color: '#1a1a1a',
              lineHeight: '1.2'
            }}>
              {availableHours}.0h
            </div>
            <div style={{
              fontSize: '11px',
              color: '#6c757d',
              marginTop: '2px'
            }}>
              Available
            </div>
          </div>
          <div style={{ textAlign: 'center' }}>
            <div style={{
              fontSize: '16px',
              fontWeight: '600',
              color: '#1a1a1a',
              lineHeight: '1.2'
            }}>
              {freeTimePercentage}%
            </div>
            <div style={{
              fontSize: '11px',
              color: '#6c757d',
              marginTop: '2px'
            }}>
              Free Time
            </div>
          </div>
        </div>
      </div>

      {/* Calendar grid exactly like your application */}
      <div style={{
        border: '1px solid #d1d5db',
        borderRadius: '6px',
        overflow: 'hidden',
        backgroundColor: '#ffffff'
      }}>
        {timeSlots.map((slot, index) => {
          const appointment = appointmentsByTime[slot.time];
          const isLastSlot = index === timeSlots.length - 1;
          
          return (
            <div
              key={slot.time}
              style={{
                display: 'flex',
                minHeight: '36px',
                borderBottom: isLastSlot ? 'none' : '1px solid #f3f4f6',
                backgroundColor: '#ffffff'
              }}
            >
              {/* Time column */}
              <div style={{
                width: '70px',
                padding: '8px 12px',
                fontSize: '12px',
                color: '#6b7280',
                fontWeight: '500',
                backgroundColor: '#f9fafb',
                borderRight: '1px solid #f3f4f6',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'flex-start'
              }}>
                {slot.displayTime}
              </div>

              {/* Appointment area */}
              <div style={{
                flex: 1,
                padding: '6px 12px',
                display: 'flex',
                alignItems: 'center',
                position: 'relative'
              }}>
                {appointment && (
                  <div style={{
                    position: 'relative',
                    width: '100%',
                    padding: '8px 12px',
                    backgroundColor: appointment.status === 'clinician_canceled' ? '#f3f4f6' : '#ffffff',
                    border: appointment.status === 'clinician_canceled' ? '1px solid #d1d5db' : '1px solid #e5e7eb',
                    borderRadius: '6px',
                    borderLeft: appointment.status === 'clinician_canceled' ? '3px solid #9ca3af' : '3px solid #3b82f6'
                  }}>
                    {/* Clinician Canceled Badge - exactly like your app */}
                    {appointment.status === 'clinician_canceled' && (
                      <span style={{
                        position: 'absolute',
                        top: '6px',
                        right: '8px',
                        fontSize: '9px',
                        fontWeight: '600',
                        padding: '2px 6px',
                        borderRadius: '3px',
                        backgroundColor: '#6b7280',
                        color: '#ffffff',
                        textTransform: 'uppercase',
                        letterSpacing: '0.3px'
                      }}>
                        Clinician Canceled
                      </span>
                    )}

                    {/* Appointment content */}
                    <div style={{
                      paddingRight: appointment.status === 'clinician_canceled' ? '100px' : '0'
                    }}>
                      <div style={{
                        fontSize: '13px',
                        fontWeight: '500',
                        color: appointment.status === 'clinician_canceled' ? '#6b7280' : '#1f2937',
                        marginBottom: '2px',
                        textDecoration: appointment.status === 'clinician_canceled' ? 'line-through' : 'none',
                        textDecorationColor: '#ef4444',
                        textDecorationThickness: '1.5px'
                      }}>
                        {appointment.clientName}
                      </div>
                      <div style={{
                        fontSize: '11px',
                        color: appointment.status === 'clinician_canceled' ? '#9ca3af' : '#6b7280',
                        fontWeight: '400',
                        textDecoration: appointment.status === 'clinician_canceled' ? 'line-through' : 'none',
                        textDecorationColor: '#ef4444',
                        textDecorationThickness: '1px'
                      }}>
                        {appointment.startTime}-{appointment.endTime}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

// Complete PDF generation function
export const generateApplicationReplicaPDF = async (appointments: AppointmentData[]) => {
  console.log('Generating PDF replica of application view...');
  
  try {
    // Create temporary container
    const container = document.createElement('div');
    container.id = 'pdf-replica-container';
    container.style.position = 'absolute';
    container.style.left = '-9999px';
    container.style.top = '0';
    container.style.width = '1000px';
    container.style.backgroundColor = '#ffffff';
    document.body.appendChild(container);

    // Import React dynamically
    const React = await import('react');
    const { createRoot } = await import('react-dom/client');
    
    // Render the replica component
    const root = createRoot(container);
    
    await new Promise<void>((resolve) => {
      root.render(
        React.createElement(ApplicationReplicaPDF, { appointments }),
        resolve
      );
    });

    // Wait for complete rendering
    await new Promise(resolve => setTimeout(resolve, 1500));

    // Generate high-quality PDF
    const canvas = await html2canvas(container, {
      scale: 2,
      useCORS: true,
      allowTaint: false,
      backgroundColor: '#ffffff',
      width: 1000,
      height: container.scrollHeight || 1400,
      scrollX: 0,
      scrollY: 0
    });

    // Create PDF with proper dimensions
    const imgData = canvas.toDataURL('image/png', 1.0);
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });

    const pdfWidth = 210; // A4 width in mm
    const pdfHeight = 297; // A4 height in mm
    const imgWidth = pdfWidth - 20; // Leave 10mm margin on each side
    const imgHeight = (canvas.height * imgWidth) / canvas.width;

    // Center the image on the page
    const x = 10; // 10mm left margin
    const y = 10; // 10mm top margin

    pdf.addImage(imgData, 'PNG', x, y, imgWidth, imgHeight, undefined, 'FAST');
    
    // Save the PDF
    pdf.save('daily-schedule-replica.pdf');

    // Cleanup
    document.body.removeChild(container);
    
    console.log('PDF generated successfully!');
    return true;

  } catch (error) {
    console.error('PDF generation failed:', error);
    throw error;
  }
};

// Export button component
export const ApplicationReplicaButton: React.FC<{ appointments: AppointmentData[] }> = ({ appointments }) => {
  const [isExporting, setIsExporting] = React.useState(false);

  const handleExport = async () => {
    setIsExporting(true);
    try {
      await generateApplicationReplicaPDF(appointments);
      alert('PDF exported successfully!');
    } catch (error) {
      console.error('Export failed:', error);
      alert('Export failed. Please check console for details.');
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <button
      onClick={handleExport}
      disabled={isExporting}
      style={{
        padding: '8px 16px',
        backgroundColor: isExporting ? '#9ca3af' : '#3b82f6',
        color: '#ffffff',
        border: 'none',
        borderRadius: '6px',
        fontSize: '13px',
        fontWeight: '500',
        cursor: isExporting ? 'not-allowed' : 'pointer',
        transition: 'background-color 0.2s'
      }}
    >
      {isExporting ? 'Generating PDF...' : 'Export Application View PDF'}
    </button>
  );
};

// Your exact appointment data
export const sampleAppointmentData: AppointmentData[] = [
  {
    id: '1',
    startTime: '07:00',
    endTime: '08:00',
    clientName: 'Richie Hayes',
    status: 'confirmed',
    title: 'Richie Hayes Appointment'
  },
  {
    id: '2',
    startTime: '08:00',
    endTime: '09:00',
    clientName: 'John Best',
    status: 'clinician_canceled',
    title: 'John Best Appointment'
  },
  {
    id: '3',
    startTime: '11:00',
    endTime: '12:00',
    clientName: 'Sarah Palladino',
    status: 'confirmed',
    title: 'Sarah Palladino Appointment'
  },
  {
    id: '4',
    startTime: '13:00',
    endTime: '14:00',
    clientName: 'Noah Silverman',
    status: 'confirmed',
    title: 'Noah Silverman Appointment'
  },
  {
    id: '5',
    startTime: '14:00',
    endTime: '15:00',
    clientName: 'Zena Frey',
    status: 'confirmed',
    title: 'Zena Frey Appointment'
  },
  {
    id: '6',
    startTime: '16:00',
    endTime: '17:00',
    clientName: 'Trendall Storey',
    status: 'confirmed',
    title: 'Trendall Storey Appointment'
  },
  {
    id: '7',
    startTime: '17:00',
    endTime: '18:00',
    clientName: 'Michael Bower & Bob Delmond',
    status: 'confirmed',
    title: 'Michael Bower & Bob Delmond Appointment'
  },
  {
    id: '8',
    startTime: '18:00',
    endTime: '19:00',
    clientName: 'Brianna Brickman',
    status: 'confirmed',
    title: 'Brianna Brickman Appointment'
  }
];